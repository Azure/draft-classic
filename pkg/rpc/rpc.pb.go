// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	AppArchive
	Version
	UpOptions
	UpRequest
	UpSummary
	UpMessage
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import hapi_chart "k8s.io/helm/pkg/proto/hapi/chart"
import hapi_chart3 "k8s.io/helm/pkg/proto/hapi/chart"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// StatusCode is the enumeration of the possible status codes
// returned for a draft up. TODO: Flush this out.
type UpSummary_StatusCode int32

const (
	UpSummary_UNKNOWN UpSummary_StatusCode = 0
	UpSummary_LOGGING UpSummary_StatusCode = 1
	UpSummary_STARTED UpSummary_StatusCode = 2
	UpSummary_ONGOING UpSummary_StatusCode = 3
	UpSummary_SUCCESS UpSummary_StatusCode = 4
	UpSummary_FAILURE UpSummary_StatusCode = 5
)

var UpSummary_StatusCode_name = map[int32]string{
	0: "UNKNOWN",
	1: "LOGGING",
	2: "STARTED",
	3: "ONGOING",
	4: "SUCCESS",
	5: "FAILURE",
}
var UpSummary_StatusCode_value = map[string]int32{
	"UNKNOWN": 0,
	"LOGGING": 1,
	"STARTED": 2,
	"ONGOING": 3,
	"SUCCESS": 4,
	"FAILURE": 5,
}

func (x UpSummary_StatusCode) String() string {
	return proto.EnumName(UpSummary_StatusCode_name, int32(x))
}
func (UpSummary_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

// AppArchive represents the archived application included in a `draft up`.
type AppArchive struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *AppArchive) Reset()                    { *m = AppArchive{} }
func (m *AppArchive) String() string            { return proto.CompactTextString(m) }
func (*AppArchive) ProtoMessage()               {}
func (*AppArchive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppArchive) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppArchive) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// Version represents the wire description of a server's version.
type Version struct {
	SemVer       string `protobuf:"bytes,1,opt,name=sem_ver,json=semVer" json:"sem_ver,omitempty"`
	GitCommit    string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit" json:"git_commit,omitempty"`
	GitTreeState string `protobuf:"bytes,3,opt,name=git_tree_state,json=gitTreeState" json:"git_tree_state,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Version) GetSemVer() string {
	if m != nil {
		return m.SemVer
	}
	return ""
}

func (m *Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *Version) GetGitTreeState() string {
	if m != nil {
		return m.GitTreeState
	}
	return ""
}

// UpOptions are configurable settings to use when issuing a `draft up`.
type UpOptions struct {
	ReleaseWait bool `protobuf:"varint,1,opt,name=release_wait,json=releaseWait" json:"release_wait,omitempty"`
}

func (m *UpOptions) Reset()                    { *m = UpOptions{} }
func (m *UpOptions) String() string            { return proto.CompactTextString(m) }
func (*UpOptions) ProtoMessage()               {}
func (*UpOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpOptions) GetReleaseWait() bool {
	if m != nil {
		return m.ReleaseWait
	}
	return false
}

// UpRequest indicates the message sent by a draft client and received
// by a draft server to carry out a draft up command.
type UpRequest struct {
	AppName    string             `protobuf:"bytes,1,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Namespace  string             `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Options    *UpOptions         `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	Chart      *hapi_chart3.Chart `protobuf:"bytes,4,opt,name=chart" json:"chart,omitempty"`
	Values     *hapi_chart.Config `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
	AppArchive *AppArchive        `protobuf:"bytes,6,opt,name=app_archive,json=appArchive" json:"app_archive,omitempty"`
}

func (m *UpRequest) Reset()                    { *m = UpRequest{} }
func (m *UpRequest) String() string            { return proto.CompactTextString(m) }
func (*UpRequest) ProtoMessage()               {}
func (*UpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpRequest) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *UpRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpRequest) GetOptions() *UpOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *UpRequest) GetChart() *hapi_chart3.Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *UpRequest) GetValues() *hapi_chart.Config {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *UpRequest) GetAppArchive() *AppArchive {
	if m != nil {
		return m.AppArchive
	}
	return nil
}

// UpSummary is the message returned when executing a draft up.
type UpSummary struct {
	// stage_desc describes the particular stage this summary
	// represents, e.g. "Build Docker Image." This is meant
	// to be a canonical summary of the stage's intent.
	StageDesc string `protobuf:"bytes,1,opt,name=stage_desc,json=stageDesc" json:"stage_desc,omitempty"`
	// status_text indicates a string description of the progress
	// or completion of draft up.
	StatusText string `protobuf:"bytes,2,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
	// status_code indicates the status of the progress or
	// completion of a draft up.
	StatusCode UpSummary_StatusCode `protobuf:"varint,3,opt,name=status_code,json=statusCode,enum=rpc.UpSummary_StatusCode" json:"status_code,omitempty"`
}

func (m *UpSummary) Reset()                    { *m = UpSummary{} }
func (m *UpSummary) String() string            { return proto.CompactTextString(m) }
func (*UpSummary) ProtoMessage()               {}
func (*UpSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpSummary) GetStageDesc() string {
	if m != nil {
		return m.StageDesc
	}
	return ""
}

func (m *UpSummary) GetStatusText() string {
	if m != nil {
		return m.StatusText
	}
	return ""
}

func (m *UpSummary) GetStatusCode() UpSummary_StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return UpSummary_UNKNOWN
}

// UpMessage is the discriminated union of draft up messages
// exchanged between the client and server.
type UpMessage struct {
	// Types that are valid to be assigned to Message:
	//	*UpMessage_UpRequest
	//	*UpMessage_UpSummary
	Message isUpMessage_Message `protobuf_oneof:"Message"`
}

func (m *UpMessage) Reset()                    { *m = UpMessage{} }
func (m *UpMessage) String() string            { return proto.CompactTextString(m) }
func (*UpMessage) ProtoMessage()               {}
func (*UpMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isUpMessage_Message interface {
	isUpMessage_Message()
}

type UpMessage_UpRequest struct {
	UpRequest *UpRequest `protobuf:"bytes,1,opt,name=up_request,json=upRequest,oneof"`
}
type UpMessage_UpSummary struct {
	UpSummary *UpSummary `protobuf:"bytes,2,opt,name=up_summary,json=upSummary,oneof"`
}

func (*UpMessage_UpRequest) isUpMessage_Message() {}
func (*UpMessage_UpSummary) isUpMessage_Message() {}

func (m *UpMessage) GetMessage() isUpMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpMessage) GetUpRequest() *UpRequest {
	if x, ok := m.GetMessage().(*UpMessage_UpRequest); ok {
		return x.UpRequest
	}
	return nil
}

func (m *UpMessage) GetUpSummary() *UpSummary {
	if x, ok := m.GetMessage().(*UpMessage_UpSummary); ok {
		return x.UpSummary
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpMessage_OneofMarshaler, _UpMessage_OneofUnmarshaler, _UpMessage_OneofSizer, []interface{}{
		(*UpMessage_UpRequest)(nil),
		(*UpMessage_UpSummary)(nil),
	}
}

func _UpMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpMessage)
	// Message
	switch x := m.Message.(type) {
	case *UpMessage_UpRequest:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpRequest); err != nil {
			return err
		}
	case *UpMessage_UpSummary:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpSummary); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _UpMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpMessage)
	switch tag {
	case 1: // Message.up_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpRequest)
		err := b.DecodeMessage(msg)
		m.Message = &UpMessage_UpRequest{msg}
		return true, err
	case 2: // Message.up_summary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpSummary)
		err := b.DecodeMessage(msg)
		m.Message = &UpMessage_UpSummary{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpMessage)
	// Message
	switch x := m.Message.(type) {
	case *UpMessage_UpRequest:
		s := proto.Size(x.UpRequest)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpMessage_UpSummary:
		s := proto.Size(x.UpSummary)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*AppArchive)(nil), "rpc.AppArchive")
	proto.RegisterType((*Version)(nil), "rpc.Version")
	proto.RegisterType((*UpOptions)(nil), "rpc.UpOptions")
	proto.RegisterType((*UpRequest)(nil), "rpc.UpRequest")
	proto.RegisterType((*UpSummary)(nil), "rpc.UpSummary")
	proto.RegisterType((*UpMessage)(nil), "rpc.UpMessage")
	proto.RegisterEnum("rpc.UpSummary_StatusCode", UpSummary_StatusCode_name, UpSummary_StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Draft service

type DraftClient interface {
	// GetVersion returns the current version of the server.
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error)
	// UpBuild returns a stream of the UpSummary within
	// for a given draft upload.
	//
	// Results are streamed rather than returned at once so
	// each stage of a draft up may be distinguished by the
	// client as a distinct message.
	UpBuild(ctx context.Context, in *UpMessage, opts ...grpc.CallOption) (Draft_UpBuildClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of UpMessages each representing a separate
	// draft up. This is the api invoked by the draft client when
	// doing a draft up with watch enabled.
	UpStream(ctx context.Context, opts ...grpc.CallOption) (Draft_UpStreamClient, error)
}

type draftClient struct {
	cc *grpc.ClientConn
}

func NewDraftClient(cc *grpc.ClientConn) DraftClient {
	return &draftClient{cc}
}

func (c *draftClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/rpc.Draft/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftClient) UpBuild(ctx context.Context, in *UpMessage, opts ...grpc.CallOption) (Draft_UpBuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Draft_serviceDesc.Streams[0], c.cc, "/rpc.Draft/UpBuild", opts...)
	if err != nil {
		return nil, err
	}
	x := &draftUpBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Draft_UpBuildClient interface {
	Recv() (*UpMessage, error)
	grpc.ClientStream
}

type draftUpBuildClient struct {
	grpc.ClientStream
}

func (x *draftUpBuildClient) Recv() (*UpMessage, error) {
	m := new(UpMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *draftClient) UpStream(ctx context.Context, opts ...grpc.CallOption) (Draft_UpStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Draft_serviceDesc.Streams[1], c.cc, "/rpc.Draft/UpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &draftUpStreamClient{stream}
	return x, nil
}

type Draft_UpStreamClient interface {
	Send(*UpMessage) error
	Recv() (*UpMessage, error)
	grpc.ClientStream
}

type draftUpStreamClient struct {
	grpc.ClientStream
}

func (x *draftUpStreamClient) Send(m *UpMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *draftUpStreamClient) Recv() (*UpMessage, error) {
	m := new(UpMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Draft service

type DraftServer interface {
	// GetVersion returns the current version of the server.
	GetVersion(context.Context, *google_protobuf.Empty) (*Version, error)
	// UpBuild returns a stream of the UpSummary within
	// for a given draft upload.
	//
	// Results are streamed rather than returned at once so
	// each stage of a draft up may be distinguished by the
	// client as a distinct message.
	UpBuild(*UpMessage, Draft_UpBuildServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of UpMessages each representing a separate
	// draft up. This is the api invoked by the draft client when
	// doing a draft up with watch enabled.
	UpStream(Draft_UpStreamServer) error
}

func RegisterDraftServer(s *grpc.Server, srv DraftServer) {
	s.RegisterService(&_Draft_serviceDesc, srv)
}

func _Draft_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Draft/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Draft_UpBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DraftServer).UpBuild(m, &draftUpBuildServer{stream})
}

type Draft_UpBuildServer interface {
	Send(*UpMessage) error
	grpc.ServerStream
}

type draftUpBuildServer struct {
	grpc.ServerStream
}

func (x *draftUpBuildServer) Send(m *UpMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Draft_UpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DraftServer).UpStream(&draftUpStreamServer{stream})
}

type Draft_UpStreamServer interface {
	Send(*UpMessage) error
	Recv() (*UpMessage, error)
	grpc.ServerStream
}

type draftUpStreamServer struct {
	grpc.ServerStream
}

func (x *draftUpStreamServer) Send(m *UpMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *draftUpStreamServer) Recv() (*UpMessage, error) {
	m := new(UpMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Draft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Draft",
	HandlerType: (*DraftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Draft_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpBuild",
			Handler:       _Draft_UpBuild_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpStream",
			Handler:       _Draft_UpStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xb6, 0xb5, 0x59, 0x5e, 0xab, 0x51, 0x7c, 0xd8, 0xb2, 0x02, 0x62, 0x44, 0x48, 0x54,
	0x48, 0xa4, 0xd5, 0xe0, 0xb4, 0x5b, 0xd7, 0x95, 0x32, 0x31, 0x5a, 0x29, 0x69, 0x37, 0x69, 0x97,
	0xc8, 0x4b, 0xdf, 0xb2, 0x48, 0x4d, 0x63, 0x6c, 0x67, 0x6c, 0x7f, 0x86, 0x3f, 0xc7, 0x6f, 0xe0,
	0x8e, 0x6c, 0x27, 0xed, 0xe0, 0xc2, 0x25, 0xf2, 0xfb, 0xde, 0xf7, 0xec, 0xf7, 0xbd, 0xcf, 0x0e,
	0x38, 0x9c, 0xc5, 0x3e, 0xe3, 0xb9, 0xcc, 0xc9, 0x36, 0x67, 0x71, 0xe7, 0x45, 0x92, 0xe7, 0xc9,
	0x12, 0x7b, 0x1a, 0xba, 0x29, 0x6e, 0x7b, 0x98, 0x31, 0xf9, 0x68, 0x18, 0x9d, 0x83, 0x3b, 0xca,
	0xd2, 0x5e, 0x7c, 0x47, 0xb9, 0xec, 0xc5, 0xf9, 0xea, 0x36, 0x4d, 0xca, 0xc4, 0xfe, 0xd3, 0x84,
	0xfa, 0x1a, 0xdc, 0x3b, 0x01, 0x18, 0x30, 0x36, 0xe0, 0xf1, 0x5d, 0x7a, 0x8f, 0x84, 0xc0, 0xce,
	0x8a, 0x66, 0xe8, 0x5a, 0x47, 0x56, 0xd7, 0x09, 0xf4, 0x9a, 0xb8, 0x60, 0xc7, 0xf9, 0x4a, 0xe2,
	0x4a, 0xba, 0x5b, 0x47, 0x56, 0xb7, 0x15, 0x54, 0xa1, 0x97, 0x80, 0x7d, 0x89, 0x5c, 0xa4, 0xf9,
	0x8a, 0x1c, 0x80, 0x2d, 0x30, 0x8b, 0xee, 0x91, 0x97, 0xb5, 0x0d, 0x81, 0xd9, 0x25, 0x72, 0xf2,
	0x0a, 0x20, 0x49, 0x65, 0x14, 0xe7, 0x59, 0x96, 0x9a, 0x0d, 0x9c, 0xc0, 0x49, 0x52, 0x39, 0xd4,
	0x00, 0x79, 0x0b, 0x7b, 0x2a, 0x2d, 0x39, 0x62, 0x24, 0x24, 0x95, 0xe8, 0x6e, 0x6b, 0x4a, 0x2b,
	0x49, 0xe5, 0x8c, 0x23, 0x86, 0x0a, 0xf3, 0x7c, 0x70, 0xe6, 0x6c, 0xca, 0x64, 0x9a, 0xaf, 0x04,
	0x79, 0x03, 0x2d, 0x8e, 0x4b, 0xa4, 0x02, 0xa3, 0x1f, 0x34, 0x95, 0xfa, 0xbc, 0xdd, 0xa0, 0x59,
	0x62, 0x57, 0x34, 0x95, 0xde, 0x6f, 0x4b, 0x15, 0x04, 0xf8, 0xbd, 0x40, 0x21, 0xc9, 0x21, 0xec,
	0x52, 0xc6, 0xa2, 0x27, 0xc2, 0x6c, 0xca, 0xd8, 0x44, 0x69, 0x7b, 0x09, 0x8e, 0x82, 0x05, 0xa3,
	0x31, 0x56, 0xcd, 0xad, 0x01, 0xd2, 0x05, 0x3b, 0x37, 0x87, 0xea, 0xae, 0x9a, 0xc7, 0x7b, 0xbe,
	0xf2, 0x62, 0xdd, 0x4a, 0x50, 0xa5, 0xc9, 0x3b, 0xa8, 0xeb, 0xa1, 0xba, 0x3b, 0x9a, 0xf7, 0xdc,
	0x57, 0xd3, 0xf6, 0xcd, 0x9c, 0x87, 0xea, 0x1b, 0x98, 0x3c, 0x79, 0x0f, 0x8d, 0x7b, 0xba, 0x2c,
	0x50, 0xb8, 0x75, 0xcd, 0x24, 0x7f, 0x31, 0xb5, 0x61, 0x41, 0xc9, 0x20, 0x7d, 0x68, 0xaa, 0xbe,
	0xa9, 0xf1, 0xc6, 0x6d, 0xe8, 0x82, 0x67, 0xba, 0x85, 0x8d, 0x65, 0x01, 0xd0, 0xf5, 0xda, 0xfb,
	0xa5, 0x75, 0x87, 0x45, 0x96, 0x51, 0xfe, 0xa8, 0x46, 0x2f, 0x24, 0x4d, 0x30, 0x5a, 0xa0, 0x88,
	0x4b, 0xe5, 0x8e, 0x46, 0xce, 0x50, 0xc4, 0xe4, 0x35, 0x34, 0xd5, 0xc4, 0x0b, 0x11, 0x49, 0x7c,
	0xa8, 0xac, 0x01, 0x03, 0xcd, 0xf0, 0x41, 0x92, 0x93, 0x35, 0x21, 0xce, 0x17, 0xc6, 0x98, 0xbd,
	0xe3, 0xc3, 0x72, 0x04, 0xe5, 0x21, 0x7e, 0xa8, 0x19, 0xc3, 0x7c, 0x81, 0x55, 0xad, 0x5a, 0x7b,
	0xd7, 0x00, 0x9b, 0x0c, 0x69, 0x82, 0x3d, 0x9f, 0x7c, 0x9d, 0x4c, 0xaf, 0x26, 0xed, 0x9a, 0x0a,
	0x2e, 0xa6, 0xe3, 0xf1, 0xf9, 0x64, 0xdc, 0xb6, 0x54, 0x10, 0xce, 0x06, 0xc1, 0x6c, 0x74, 0xd6,
	0xde, 0x52, 0xc1, 0x74, 0x32, 0x9e, 0xaa, 0xcc, 0xb6, 0xce, 0xcc, 0x87, 0xc3, 0x51, 0x18, 0xb6,
	0x77, 0x54, 0xf0, 0x79, 0x70, 0x7e, 0x31, 0x0f, 0x46, 0xed, 0xba, 0xf7, 0xa0, 0x44, 0x7e, 0x43,
	0x21, 0x68, 0x82, 0xa4, 0x07, 0x50, 0xb0, 0x88, 0x1b, 0xab, 0xb5, 0xc8, 0x8d, 0x4d, 0xe5, 0x05,
	0xf8, 0x52, 0x0b, 0x9c, 0x62, 0x7d, 0x1b, 0x4c, 0x81, 0x30, 0xed, 0x6b, 0xd5, 0x9b, 0x82, 0x52,
	0x94, 0x29, 0x28, 0x83, 0x53, 0x07, 0xec, 0xf2, 0xb0, 0xe3, 0x9f, 0x16, 0xd4, 0xcf, 0x38, 0xbd,
	0x95, 0xe4, 0x13, 0xc0, 0x18, 0x65, 0x75, 0xfb, 0xf7, 0x7d, 0xf3, 0x26, 0xfd, 0xea, 0x4d, 0xfa,
	0x23, 0xf5, 0x26, 0x3b, 0x2d, 0xbd, 0x6f, 0xc9, 0xf2, 0x6a, 0xe4, 0x03, 0xd8, 0x73, 0x76, 0x5a,
	0xa4, 0xcb, 0x05, 0xa9, 0x8e, 0x2c, 0xb7, 0xee, 0xfc, 0x13, 0x7b, 0xb5, 0xbe, 0x45, 0xfa, 0xb0,
	0x3b, 0x67, 0xa1, 0xe4, 0x48, 0xb3, 0xff, 0xf3, 0xbb, 0x56, 0xdf, 0x3a, 0xad, 0x5f, 0xab, 0x5f,
	0xc4, 0x4d, 0x43, 0xf7, 0xf1, 0xf1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x5f, 0x00, 0x6c,
	0x3b, 0x04, 0x00, 0x00,
}
