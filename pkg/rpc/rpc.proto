syntax = "proto3";

package rpc;

import "google/protobuf/empty.proto";
import "hapi/chart/config.proto";
import "hapi/chart/chart.proto";

option go_package = "rpc";

service Draft {
	// GetVersion returns the current version of the server.
	rpc GetVersion(google.protobuf.Empty) returns (Version) {}
	
	// GetLogs returns the logs for a particular draft build.
	rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {}

	// UpBuild returns a stream of the UpSummary within
	// for a given draft upload.
	//
	// Results are streamed rather than returned at once so
	// each stage of a draft up may be distinguished by the
	// client as a distinct message.
	rpc UpBuild(UpMessage) returns (stream UpMessage) {}

	// A Bidirectional streaming RPC.
  	//
  	// Accepts a stream of UpMessages each representing a separate
	// draft up. This is the api invoked by the draft client when
	// doing a draft up with watch enabled. 
	rpc UpStream(stream UpMessage) returns (stream UpMessage) {}
}

// GetLogsRequest is the message sent to draftd to retrieve logs for a draft build.
message GetLogsRequest {
	string app_name = 1;
	string buildID = 2;
	int64 limit = 3;
}

// GetLogsResponse is the message returned by draftd containing the logs (up to limit)
// for a draft build.
message GetLogsResponse {
	bytes content = 1;
}

// AppArchive represents the archived application included in a `draft up`.
message AppArchive {
	string name = 1;
	bytes content = 2;
}

// Version represents the wire description of a server's version. 
message Version {
	string sem_ver = 1;
	string git_commit = 2;
	string git_tree_state = 3;
}

// UpOptions are configurable settings to use when issuing a `draft up`.
message UpOptions {
	bool release_wait = 1;
}

// UpRequest indicates the message sent by a draft client and received
// by a draft server to carry out a draft up command.
message UpRequest {
	string app_name = 1;
	string namespace = 2;
	UpOptions options = 3;
	hapi.chart.Chart chart = 4;
	hapi.chart.Config values = 5;
	AppArchive app_archive = 6;
}

// UpSummary is the message returned when executing a draft up.
message UpSummary {
	// StatusCode is the enumeration of the possible status codes
	// returned for a draft up. TODO: Flush this out.
	enum StatusCode {
		UNKNOWN = 0;
		LOGGING = 1;
		STARTED = 2;
		ONGOING = 3;
		SUCCESS = 4;
		FAILURE = 5;
	}
	// stage_desc describes the particular stage this summary
	// represents, e.g. "Build Docker Image." This is meant
	// to be a canonical summary of the stage's intent.
	string stage_desc = 1;
	// status_text indicates a string description of the progress
	// or completion of draft up.
	string status_text = 2;
	// status_code indicates the status of the progress or
	// completion of a draft up.
	StatusCode status_code = 3;
	// build_id is the build identifier associated with this draft up build.
	string build_id = 4;
}

// UpMessage is the discriminated union of draft up messages
// exchanged between the client and server.
message UpMessage {
	oneof Message {
		UpRequest up_request = 1;
		UpSummary up_summary = 2;
	}
}
